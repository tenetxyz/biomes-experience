// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

import { IBaseWorld } from "@latticexyz/world/src/codegen/interfaces/IBaseWorld.sol";
import { System } from "@latticexyz/world/src/System.sol";
import { ResourceId } from "@latticexyz/world/src/WorldResourceId.sol";
import { Utils } from "@latticexyz/world/src/Utils.sol";

import { ICustomUnregisterDelegation } from "@latticexyz/world/src/ICustomUnregisterDelegation.sol";
import { ISystemHook } from "@latticexyz/world/src/ISystemHook.sol";
import { IOptionalSystemHook } from "@latticexyz/world/src/IOptionalSystemHook.sol";

import { IERC165 } from "@latticexyz/world/src/IERC165.sol";
import { WorldContextConsumer } from "@latticexyz/world/src/WorldContext.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";

import { CallMetadata } from "../codegen/tables/CallMetadata.sol";
import { getCallerNamespace } from "@biomesaw/utils/src/CallUtils.sol";

// ----------------------------------------------------------------------------
// Note: DO NOT EDIT THIS FILE IF YOU WANT TO KEEP THE EXPERIENCE UPGRADEABLE
// ----------------------------------------------------------------------------

// Functions that are called by the Biomes World contract
contract WorldSystem is System, ICustomUnregisterDelegation, IOptionalSystemHook {
  function supportsInterface(bytes4 interfaceId) public pure override(IERC165, WorldContextConsumer) returns (bool) {
    return
      interfaceId == type(ICustomUnregisterDelegation).interfaceId ||
      interfaceId == type(IOptionalSystemHook).interfaceId ||
      super.supportsInterface(interfaceId);
  }

  function canUnregister(address delegator) public override returns (bool) {
    bytes4 worldFunctionSelector = CallMetadata.get(ICustomUnregisterDelegation.canUnregister.selector);
    if (worldFunctionSelector == bytes4(0)) {
      return true;
    }
    (bool success, bytes memory returnData) = _world().call(abi.encodeWithSelector(worldFunctionSelector, delegator));
    if (!success) revertWithBytes(returnData);
    return abi.decode(returnData, (bool));
  }

  function onRegisterHook(
    address msgSender,
    ResourceId systemId,
    uint8 enabledHooksBitmap,
    bytes32 callDataHash
  ) public override {
    bytes4 worldFunctionSelector = CallMetadata.get(IOptionalSystemHook.onRegisterHook.selector);
    if (worldFunctionSelector == bytes4(0)) {
      return;
    }
    (bool success, bytes memory returnData) = _world().call(
      abi.encodeWithSelector(worldFunctionSelector, msgSender, systemId, enabledHooksBitmap, callDataHash)
    );
    if (!success) revertWithBytes(returnData);
  }

  function onUnregisterHook(
    address msgSender,
    ResourceId systemId,
    uint8 enabledHooksBitmap,
    bytes32 callDataHash
  ) public override {
    bytes4 worldFunctionSelector = CallMetadata.get(IOptionalSystemHook.onUnregisterHook.selector);
    if (worldFunctionSelector == bytes4(0)) {
      return;
    }
    (bool success, bytes memory returnData) = _world().call(
      abi.encodeWithSelector(worldFunctionSelector, msgSender, systemId, enabledHooksBitmap, callDataHash)
    );
    if (!success) revertWithBytes(returnData);
  }

  function onBeforeCallSystem(address msgSender, ResourceId systemId, bytes memory callData) public override {
    bytes4 worldFunctionSelector = CallMetadata.get(ISystemHook.onBeforeCallSystem.selector);
    if (worldFunctionSelector == bytes4(0)) {
      return;
    }
    (bool success, bytes memory returnData) = _world().call(
      abi.encodeWithSelector(worldFunctionSelector, msgSender, systemId, callData)
    );
    if (!success) revertWithBytes(returnData);
  }

  function onAfterCallSystem(address msgSender, ResourceId systemId, bytes memory callData) public override {
    bytes4 worldFunctionSelector = CallMetadata.get(ISystemHook.onAfterCallSystem.selector);
    if (worldFunctionSelector == bytes4(0)) {
      return;
    }
    (bool success, bytes memory returnData) = _world().call(
      abi.encodeWithSelector(worldFunctionSelector, msgSender, systemId, callData)
    );
    if (!success) revertWithBytes(returnData);
  }

  // Only callable by systems in the same namespace
  function callWorld(address delegator, ResourceId systemId, bytes memory callData) public {
    bytes14 callerNamespace = getCallerNamespace(_msgSender());
    require(callerNamespace == Utils.systemNamespace(), "Unauthorized");
    IBaseWorld(_world()).callFrom(delegator, systemId, callData);
  }
}
