// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ExchangeData {
  uint256 price;
  uint256 lastPurchaseTime;
  uint256 sold;
}

library Exchange {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "bazaar", name: "Exchange", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746262617a616172000000000000000045786368616e67650000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0060030020202000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint8)
  Schema constant _keySchema = Schema.wrap(0x0001010000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x006003001f1f1f00000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "objectTypeId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "price";
    fieldNames[1] = "lastPurchaseTime";
    fieldNames[2] = "sold";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get price.
   */
  function getPrice(uint8 objectTypeId) internal view returns (uint256 price) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get price.
   */
  function _getPrice(uint8 objectTypeId) internal view returns (uint256 price) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set price.
   */
  function setPrice(uint8 objectTypeId, uint256 price) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((price)), _fieldLayout);
  }

  /**
   * @notice Set price.
   */
  function _setPrice(uint8 objectTypeId, uint256 price) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((price)), _fieldLayout);
  }

  /**
   * @notice Get lastPurchaseTime.
   */
  function getLastPurchaseTime(uint8 objectTypeId) internal view returns (uint256 lastPurchaseTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastPurchaseTime.
   */
  function _getLastPurchaseTime(uint8 objectTypeId) internal view returns (uint256 lastPurchaseTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastPurchaseTime.
   */
  function setLastPurchaseTime(uint8 objectTypeId, uint256 lastPurchaseTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastPurchaseTime)), _fieldLayout);
  }

  /**
   * @notice Set lastPurchaseTime.
   */
  function _setLastPurchaseTime(uint8 objectTypeId, uint256 lastPurchaseTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastPurchaseTime)), _fieldLayout);
  }

  /**
   * @notice Get sold.
   */
  function getSold(uint8 objectTypeId) internal view returns (uint256 sold) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get sold.
   */
  function _getSold(uint8 objectTypeId) internal view returns (uint256 sold) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set sold.
   */
  function setSold(uint8 objectTypeId, uint256 sold) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((sold)), _fieldLayout);
  }

  /**
   * @notice Set sold.
   */
  function _setSold(uint8 objectTypeId, uint256 sold) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((sold)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint8 objectTypeId) internal view returns (ExchangeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint8 objectTypeId) internal view returns (ExchangeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(uint8 objectTypeId, uint256 price, uint256 lastPurchaseTime, uint256 sold) internal {
    bytes memory _staticData = encodeStatic(price, lastPurchaseTime, sold);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(uint8 objectTypeId, uint256 price, uint256 lastPurchaseTime, uint256 sold) internal {
    bytes memory _staticData = encodeStatic(price, lastPurchaseTime, sold);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint8 objectTypeId, ExchangeData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.price, _table.lastPurchaseTime, _table.sold);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint8 objectTypeId, ExchangeData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.price, _table.lastPurchaseTime, _table.sold);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 price, uint256 lastPurchaseTime, uint256 sold) {
    price = (uint256(Bytes.getBytes32(_blob, 0)));

    lastPurchaseTime = (uint256(Bytes.getBytes32(_blob, 32)));

    sold = (uint256(Bytes.getBytes32(_blob, 64)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ExchangeData memory _table) {
    (_table.price, _table.lastPurchaseTime, _table.sold) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint8 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint8 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(uint256 price, uint256 lastPurchaseTime, uint256 sold) internal pure returns (bytes memory) {
    return abi.encodePacked(price, lastPurchaseTime, sold);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 price,
    uint256 lastPurchaseTime,
    uint256 sold
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(price, lastPurchaseTime, sold);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint8 objectTypeId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(objectTypeId));

    return _keyTuple;
  }
}
