// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct GameMetadataData {
  int16 guardPositionX;
  int16 guardPositionY;
  int16 guardPositionZ;
  int16[] unguardPositionsX;
  int16[] unguardPositionsY;
  int16[] unguardPositionsZ;
  address[] allowedPlayers;
}

library GameMetadata {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "locationguard", name: "GameMetadata", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626c6f636174696f6e67756172640047616d654d6574616461746100000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0006030402020200000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (int16, int16, int16, int16[], int16[], int16[], address[])
  Schema constant _valueSchema = Schema.wrap(0x00060304212121838383c3000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "guardPositionX";
    fieldNames[1] = "guardPositionY";
    fieldNames[2] = "guardPositionZ";
    fieldNames[3] = "unguardPositionsX";
    fieldNames[4] = "unguardPositionsY";
    fieldNames[5] = "unguardPositionsZ";
    fieldNames[6] = "allowedPlayers";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get guardPositionX.
   */
  function getGuardPositionX() internal view returns (int16 guardPositionX) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get guardPositionX.
   */
  function _getGuardPositionX() internal view returns (int16 guardPositionX) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set guardPositionX.
   */
  function setGuardPositionX(int16 guardPositionX) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((guardPositionX)), _fieldLayout);
  }

  /**
   * @notice Set guardPositionX.
   */
  function _setGuardPositionX(int16 guardPositionX) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((guardPositionX)), _fieldLayout);
  }

  /**
   * @notice Get guardPositionY.
   */
  function getGuardPositionY() internal view returns (int16 guardPositionY) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get guardPositionY.
   */
  function _getGuardPositionY() internal view returns (int16 guardPositionY) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set guardPositionY.
   */
  function setGuardPositionY(int16 guardPositionY) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((guardPositionY)), _fieldLayout);
  }

  /**
   * @notice Set guardPositionY.
   */
  function _setGuardPositionY(int16 guardPositionY) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((guardPositionY)), _fieldLayout);
  }

  /**
   * @notice Get guardPositionZ.
   */
  function getGuardPositionZ() internal view returns (int16 guardPositionZ) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get guardPositionZ.
   */
  function _getGuardPositionZ() internal view returns (int16 guardPositionZ) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set guardPositionZ.
   */
  function setGuardPositionZ(int16 guardPositionZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((guardPositionZ)), _fieldLayout);
  }

  /**
   * @notice Set guardPositionZ.
   */
  function _setGuardPositionZ(int16 guardPositionZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((guardPositionZ)), _fieldLayout);
  }

  /**
   * @notice Get unguardPositionsX.
   */
  function getUnguardPositionsX() internal view returns (int16[] memory unguardPositionsX) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int16());
  }

  /**
   * @notice Get unguardPositionsX.
   */
  function _getUnguardPositionsX() internal view returns (int16[] memory unguardPositionsX) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int16());
  }

  /**
   * @notice Set unguardPositionsX.
   */
  function setUnguardPositionsX(int16[] memory unguardPositionsX) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((unguardPositionsX)));
  }

  /**
   * @notice Set unguardPositionsX.
   */
  function _setUnguardPositionsX(int16[] memory unguardPositionsX) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((unguardPositionsX)));
  }

  /**
   * @notice Get the length of unguardPositionsX.
   */
  function lengthUnguardPositionsX() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 2;
    }
  }

  /**
   * @notice Get the length of unguardPositionsX.
   */
  function _lengthUnguardPositionsX() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 2;
    }
  }

  /**
   * @notice Get an item of unguardPositionsX.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemUnguardPositionsX(uint256 _index) internal view returns (int16) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 2, (_index + 1) * 2);
      return (int16(uint16(bytes2(_blob))));
    }
  }

  /**
   * @notice Get an item of unguardPositionsX.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemUnguardPositionsX(uint256 _index) internal view returns (int16) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 2, (_index + 1) * 2);
      return (int16(uint16(bytes2(_blob))));
    }
  }

  /**
   * @notice Push an element to unguardPositionsX.
   */
  function pushUnguardPositionsX(int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to unguardPositionsX.
   */
  function _pushUnguardPositionsX(int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from unguardPositionsX.
   */
  function popUnguardPositionsX() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 2);
  }

  /**
   * @notice Pop an element from unguardPositionsX.
   */
  function _popUnguardPositionsX() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 2);
  }

  /**
   * @notice Update an element of unguardPositionsX at `_index`.
   */
  function updateUnguardPositionsX(uint256 _index, int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 2), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of unguardPositionsX at `_index`.
   */
  function _updateUnguardPositionsX(uint256 _index, int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 2), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get unguardPositionsY.
   */
  function getUnguardPositionsY() internal view returns (int16[] memory unguardPositionsY) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int16());
  }

  /**
   * @notice Get unguardPositionsY.
   */
  function _getUnguardPositionsY() internal view returns (int16[] memory unguardPositionsY) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int16());
  }

  /**
   * @notice Set unguardPositionsY.
   */
  function setUnguardPositionsY(int16[] memory unguardPositionsY) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((unguardPositionsY)));
  }

  /**
   * @notice Set unguardPositionsY.
   */
  function _setUnguardPositionsY(int16[] memory unguardPositionsY) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((unguardPositionsY)));
  }

  /**
   * @notice Get the length of unguardPositionsY.
   */
  function lengthUnguardPositionsY() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 2;
    }
  }

  /**
   * @notice Get the length of unguardPositionsY.
   */
  function _lengthUnguardPositionsY() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 2;
    }
  }

  /**
   * @notice Get an item of unguardPositionsY.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemUnguardPositionsY(uint256 _index) internal view returns (int16) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 2, (_index + 1) * 2);
      return (int16(uint16(bytes2(_blob))));
    }
  }

  /**
   * @notice Get an item of unguardPositionsY.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemUnguardPositionsY(uint256 _index) internal view returns (int16) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 2, (_index + 1) * 2);
      return (int16(uint16(bytes2(_blob))));
    }
  }

  /**
   * @notice Push an element to unguardPositionsY.
   */
  function pushUnguardPositionsY(int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to unguardPositionsY.
   */
  function _pushUnguardPositionsY(int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from unguardPositionsY.
   */
  function popUnguardPositionsY() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 2);
  }

  /**
   * @notice Pop an element from unguardPositionsY.
   */
  function _popUnguardPositionsY() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 2);
  }

  /**
   * @notice Update an element of unguardPositionsY at `_index`.
   */
  function updateUnguardPositionsY(uint256 _index, int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 2), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of unguardPositionsY at `_index`.
   */
  function _updateUnguardPositionsY(uint256 _index, int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 2), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get unguardPositionsZ.
   */
  function getUnguardPositionsZ() internal view returns (int16[] memory unguardPositionsZ) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int16());
  }

  /**
   * @notice Get unguardPositionsZ.
   */
  function _getUnguardPositionsZ() internal view returns (int16[] memory unguardPositionsZ) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int16());
  }

  /**
   * @notice Set unguardPositionsZ.
   */
  function setUnguardPositionsZ(int16[] memory unguardPositionsZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 2, EncodeArray.encode((unguardPositionsZ)));
  }

  /**
   * @notice Set unguardPositionsZ.
   */
  function _setUnguardPositionsZ(int16[] memory unguardPositionsZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setDynamicField(_tableId, _keyTuple, 2, EncodeArray.encode((unguardPositionsZ)));
  }

  /**
   * @notice Get the length of unguardPositionsZ.
   */
  function lengthUnguardPositionsZ() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 2;
    }
  }

  /**
   * @notice Get the length of unguardPositionsZ.
   */
  function _lengthUnguardPositionsZ() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 2;
    }
  }

  /**
   * @notice Get an item of unguardPositionsZ.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemUnguardPositionsZ(uint256 _index) internal view returns (int16) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 2, (_index + 1) * 2);
      return (int16(uint16(bytes2(_blob))));
    }
  }

  /**
   * @notice Get an item of unguardPositionsZ.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemUnguardPositionsZ(uint256 _index) internal view returns (int16) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 2, (_index + 1) * 2);
      return (int16(uint16(bytes2(_blob))));
    }
  }

  /**
   * @notice Push an element to unguardPositionsZ.
   */
  function pushUnguardPositionsZ(int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to unguardPositionsZ.
   */
  function _pushUnguardPositionsZ(int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from unguardPositionsZ.
   */
  function popUnguardPositionsZ() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 2, 2);
  }

  /**
   * @notice Pop an element from unguardPositionsZ.
   */
  function _popUnguardPositionsZ() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 2, 2);
  }

  /**
   * @notice Update an element of unguardPositionsZ at `_index`.
   */
  function updateUnguardPositionsZ(uint256 _index, int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 2), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of unguardPositionsZ at `_index`.
   */
  function _updateUnguardPositionsZ(uint256 _index, int16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 2), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get allowedPlayers.
   */
  function getAllowedPlayers() internal view returns (address[] memory allowedPlayers) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Get allowedPlayers.
   */
  function _getAllowedPlayers() internal view returns (address[] memory allowedPlayers) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Set allowedPlayers.
   */
  function setAllowedPlayers(address[] memory allowedPlayers) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 3, EncodeArray.encode((allowedPlayers)));
  }

  /**
   * @notice Set allowedPlayers.
   */
  function _setAllowedPlayers(address[] memory allowedPlayers) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setDynamicField(_tableId, _keyTuple, 3, EncodeArray.encode((allowedPlayers)));
  }

  /**
   * @notice Get the length of allowedPlayers.
   */
  function lengthAllowedPlayers() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get the length of allowedPlayers.
   */
  function _lengthAllowedPlayers() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get an item of allowedPlayers.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemAllowedPlayers(uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Get an item of allowedPlayers.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemAllowedPlayers(uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Push an element to allowedPlayers.
   */
  function pushAllowedPlayers(address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to allowedPlayers.
   */
  function _pushAllowedPlayers(address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from allowedPlayers.
   */
  function popAllowedPlayers() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 3, 20);
  }

  /**
   * @notice Pop an element from allowedPlayers.
   */
  function _popAllowedPlayers() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 3, 20);
  }

  /**
   * @notice Update an element of allowedPlayers at `_index`.
   */
  function updateAllowedPlayers(uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of allowedPlayers at `_index`.
   */
  function _updateAllowedPlayers(uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (GameMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (GameMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    int16 guardPositionX,
    int16 guardPositionY,
    int16 guardPositionZ,
    int16[] memory unguardPositionsX,
    int16[] memory unguardPositionsY,
    int16[] memory unguardPositionsZ,
    address[] memory allowedPlayers
  ) internal {
    bytes memory _staticData = encodeStatic(guardPositionX, guardPositionY, guardPositionZ);

    EncodedLengths _encodedLengths = encodeLengths(
      unguardPositionsX,
      unguardPositionsY,
      unguardPositionsZ,
      allowedPlayers
    );
    bytes memory _dynamicData = encodeDynamic(unguardPositionsX, unguardPositionsY, unguardPositionsZ, allowedPlayers);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    int16 guardPositionX,
    int16 guardPositionY,
    int16 guardPositionZ,
    int16[] memory unguardPositionsX,
    int16[] memory unguardPositionsY,
    int16[] memory unguardPositionsZ,
    address[] memory allowedPlayers
  ) internal {
    bytes memory _staticData = encodeStatic(guardPositionX, guardPositionY, guardPositionZ);

    EncodedLengths _encodedLengths = encodeLengths(
      unguardPositionsX,
      unguardPositionsY,
      unguardPositionsZ,
      allowedPlayers
    );
    bytes memory _dynamicData = encodeDynamic(unguardPositionsX, unguardPositionsY, unguardPositionsZ, allowedPlayers);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(GameMetadataData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.guardPositionX, _table.guardPositionY, _table.guardPositionZ);

    EncodedLengths _encodedLengths = encodeLengths(
      _table.unguardPositionsX,
      _table.unguardPositionsY,
      _table.unguardPositionsZ,
      _table.allowedPlayers
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.unguardPositionsX,
      _table.unguardPositionsY,
      _table.unguardPositionsZ,
      _table.allowedPlayers
    );

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(GameMetadataData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.guardPositionX, _table.guardPositionY, _table.guardPositionZ);

    EncodedLengths _encodedLengths = encodeLengths(
      _table.unguardPositionsX,
      _table.unguardPositionsY,
      _table.unguardPositionsZ,
      _table.allowedPlayers
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.unguardPositionsX,
      _table.unguardPositionsY,
      _table.unguardPositionsZ,
      _table.allowedPlayers
    );

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (int16 guardPositionX, int16 guardPositionY, int16 guardPositionZ) {
    guardPositionX = (int16(uint16(Bytes.getBytes2(_blob, 0))));

    guardPositionY = (int16(uint16(Bytes.getBytes2(_blob, 2))));

    guardPositionZ = (int16(uint16(Bytes.getBytes2(_blob, 4))));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  )
    internal
    pure
    returns (
      int16[] memory unguardPositionsX,
      int16[] memory unguardPositionsY,
      int16[] memory unguardPositionsZ,
      address[] memory allowedPlayers
    )
  {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    unguardPositionsX = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_int16());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    unguardPositionsY = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_int16());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    unguardPositionsZ = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_int16());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(3);
    }
    allowedPlayers = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_address());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (GameMetadataData memory _table) {
    (_table.guardPositionX, _table.guardPositionY, _table.guardPositionZ) = decodeStatic(_staticData);

    (
      _table.unguardPositionsX,
      _table.unguardPositionsY,
      _table.unguardPositionsZ,
      _table.allowedPlayers
    ) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    int16 guardPositionX,
    int16 guardPositionY,
    int16 guardPositionZ
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(guardPositionX, guardPositionY, guardPositionZ);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    int16[] memory unguardPositionsX,
    int16[] memory unguardPositionsY,
    int16[] memory unguardPositionsZ,
    address[] memory allowedPlayers
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(
        unguardPositionsX.length * 2,
        unguardPositionsY.length * 2,
        unguardPositionsZ.length * 2,
        allowedPlayers.length * 20
      );
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    int16[] memory unguardPositionsX,
    int16[] memory unguardPositionsY,
    int16[] memory unguardPositionsZ,
    address[] memory allowedPlayers
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        EncodeArray.encode((unguardPositionsX)),
        EncodeArray.encode((unguardPositionsY)),
        EncodeArray.encode((unguardPositionsZ)),
        EncodeArray.encode((allowedPlayers))
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    int16 guardPositionX,
    int16 guardPositionY,
    int16 guardPositionZ,
    int16[] memory unguardPositionsX,
    int16[] memory unguardPositionsY,
    int16[] memory unguardPositionsZ,
    address[] memory allowedPlayers
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(guardPositionX, guardPositionY, guardPositionZ);

    EncodedLengths _encodedLengths = encodeLengths(
      unguardPositionsX,
      unguardPositionsY,
      unguardPositionsZ,
      allowedPlayers
    );
    bytes memory _dynamicData = encodeDynamic(unguardPositionsX, unguardPositionsY, unguardPositionsZ, allowedPlayers);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
